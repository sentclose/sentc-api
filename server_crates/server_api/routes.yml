prefix: "/api"
routes:
  # api v1 routes
  - group:
      p: "/v1"
      gr:
        #_______________________________________________________________________________________________________________
        # routes don't need jwt check, but an app token
        - group:
            p: ""
            mw:
              - server_api_common::middleware::app_token::app_token_transform
            gr:
              - get: { p: "/user/:user_id/public_key", s: crate::user::get_public_key_data }
              - get: { p: "/user/:user_id/public_key/:key_id", s: crate::user::get_public_key_by_id }
              - get: { p: "/user/:user_id/verify_key/:key_id", s: crate::user::get_verify_key_by_id }
              - get: { p: "/group/:group_id/public_key", s: crate::group::get_public_key_data }
              - post: { p: "/exists", s: crate::user::exists }
              - post: { p: "/register", s: crate::user::register }
              - post: { p: "/register_light", s: crate::user::register_light }
              - post: { p: "/prepare_login", s: crate::user::prepare_login }
              - post: { p: "/done_login", s: crate::user::done_login }
              - post: { p: "/validate_mfa", s: crate::user::validate_mfa }
              - post: { p: "/validate_recovery_otp", s: crate::user::validate_recovery_otp }
              - post: { p: "/verify_login", s: crate::user::verify_login }
              - post: { p: "/verify_login_light", s: crate::user::verify_login_light }
              - post: { p: "/user/prepare_register_device", s: crate::user::prepare_register_device }
              - put: { p: "/user/reset_pw_light", s: crate::user::reset_password_light }

              - group:
                  p: "/user/forced"
                  gr:
                    - put: { p: "/delete", s: crate::user::delete_user }
                    - delete: { p: "/delete/:user_id", s: crate::user::delete_user_by_id }
                    - put: { p: "/reset_user", s: crate::user::reset_user }
                    - put: { p: "/disable_otp", s: crate::user::disable_otp_forced }
                    - delete: { p: "/sessions", s: crate::user::delete_all_sessions }

                    - post: { p: "/login", s: crate::user::verify_login_forced }
                    - post: { p: "/login_light", s: crate::user::verify_login_light_forced }

              - group:
                  p: "/group/forced"
                  gr:
                    - delete: { p: "/:group_id", s: crate::group::delete_forced }
                    - get: { p: "/:group_id/user/:user_id", s: crate::group::get_single_group_member }
                    - group:
                        p: "/:user_id"
                        mw:
                          - server_api_common::middleware::user_check_force::user_check_force_transform
                        gr:
                          - post: { p: "", s: crate::group::create_force }
                          - post: { p: "/light", s: crate::group::create_light_force }

                          - group:
                              p: "/:group_id"
                              mw:
                                - server_api_common::middleware::group::group_force_transform
                              gr:
                                - post: { p: "/child", s: crate::group::create_child_group_force }
                                - post: { p: "/child/light", s: crate::group::create_child_group_light_force }
                                - post: { p: "/connected", s: crate::group::create_connected_group_from_group_force }
                                - post: { p: "/connected/light", s: crate::group::create_connected_group_from_group_light_force }
                                - delete: { p: "/kick/:user_to_kick", s: crate::group::kick_user_from_group_forced }
                                # force invite
                                - group:
                                    p: "/invite_auto/:to_invite"
                                    gr:
                                      - post: { p: "", s: crate::group::invite_user_to_group_from_server }
                                      - post: { p: "/light", s: crate::group::invite_user_to_group_from_server_light }
                                      - post: { p: "/group", s: crate::group::invite_group_to_group_from_server }
                                      - post: { p: "/group_light", s: crate::group::invite_group_to_group_from_server_light }
              #_________________________________________________________________________________________________________
              # group with exp jwt mw -> the jwt can be exp for this routes
              - group:
                  p: ""
                  mw:
                    - server_api_common::middleware::jwt::jwt_expire_transform
                  gr:
                    - put: { p: "/refresh", s: crate::user::refresh_jwt }
                    - post: { p: "/init", s: crate::user::init_user }
              #_________________________________________________________________________________________________________
              - group:
                  p: "/keys"
                  gr:
                    - group:
                        p: "/sym_key"
                        gr:
                          - post:
                              p: ""
                              s: crate::key_management::register_sym_key
                              mw:
                                - server_api_common::middleware::jwt::jwt_transform
                          - delete:
                              p: "/:key_id"
                              s: crate::key_management::delete_sym_key
                              mw:
                                - server_api_common::middleware::jwt::jwt_transform

                          - get: { p: "/master_key/:master_key_id/:last_fetched_time/:last_key_id", s: crate::key_management::get_all_sym_keys_to_master_key }
                          - get: { p: "/:key_id", s: crate::key_management::get_sym_key_by_id }
        #_______________________________________________________________________________________________________________
        # routes which needed jwt check with a valid jwt
        - group:
            p: ""
            mw:
              - server_api_common::middleware::jwt::jwt_transform
              - server_api_common::middleware::app_token::app_token_transform
            gr:
              #_________________________________________________________________________________________________________
              # user routes in the user mod
              - group:
                  p: "/user"
                  gr:
                    - get: { p: "/device/:last_fetched_time/:last_id", s: crate::user::get_devices }
                    - get: { p: "/jwt", s: crate::user::get_user_data_from_jwt }
                    - put: { p: "", s: crate::user::update }
                    - put: { p: "/done_register_device", s: crate::user::done_register_device }
                    - put: { p: "/done_register_device_light", s: crate::user::done_register_device_light }
                    - patch: { p: "/register_otp", s: crate::user::register_otp }
                    - put: { p: "/update_pw", s: crate::user::change_password }
                    - put: { p: "/reset_pw", s: crate::user::reset_password }
                    - patch: { p: "/reset_otp", s: crate::user::reset_otp }
                    - patch: { p: "/disable_otp", s: crate::user::disable_otp }
                    - get: { p: "/otp_recovery_keys", s: crate::user::get_otp_recovery_keys }
                    # check the api token for delete action, maybe the app creator only wants to trigger delete from the own backend
                    - delete: { p: "", s: crate::user::delete }
                    - delete: { p: "/device/:device_id", s: crate::user::delete_device }
                    #___________________________________________________________________________________________________
                    - group:
                        p: "/user_keys"
                        gr:
                          - post: { p: "/rotation", s: crate::user::user_group_key_rotation }
                          - get: { p: "/rotation", s: crate::user::get_user_group_keys_for_update }
                          - put: { p: "/rotation/:key_id", s: crate::user::done_key_rotation_for_device }
                          - get: { p: "/key/:key_id", s: crate::user::get_user_key }
                          - get: { p: "/keys/:last_fetched_time/:last_k_id", s: crate::user::get_user_keys }
                          - put: { p: "/session/:key_session_id", s: crate::user::device_key_upload }
              #_________________________________________________________________________________________________________
              # group routes in the group mod, check always the app token for this actions
              - group:
                  p: "/group"
                  gr:
                    #___________________________________________________________________________________________________
                    # no group mw check needed here
                    - post: { p: "", s: crate::group::create }
                    - post: { p: "/light", s: crate::group::create_light }
                    - get: { p: "/all/:last_fetched_time/:last_group_id", s: crate::group::get_all_groups_for_user }
                    # no group mw for get invite req, because this is called form the user, not the group
                    - get: { p: "/invite/:last_fetched_time/:last_group_id", s: crate::group::get_invite_req }
                    # get all send join req, this is called from the user
                    - get: { p: "/joins/:last_fetched_time/:last_group_id", s: crate::group::get_sent_join_req_for_user }
                    - delete: { p: "/joins/:join_req_id", s: crate::group::delete_sent_join_req_for_user }
                    - group:
                        p: "/:group_id"
                        gr:
                          - patch: { p: "/invite", s: crate::group::accept_invite }
                          - delete: { p: "/invite", s: crate::group::reject_invite }
                          - patch: { p: "/join_req", s: crate::group::join_req }
                    #___________________________________________________________________________________________________
                    # group mw check needed here
                    - group:
                        p: "/:group_id"
                        mw:
                          - server_api_common::middleware::group::group_transform
                        gr:
                          - get: { p: "", s: crate::group::get_user_group_data }
                          - get: { p: "/light", s: crate::group::get_user_group_light_data }
                          - get: { p: "/update_check", s: crate::group::get_key_update_for_user }
                          - get: { p: "/update_check_light", s: crate::group::get_update_for_user_light }
                          - get: { p: "/keys/:last_fetched_time/:last_k_id", s: crate::group::get_user_group_keys }
                          - get: { p: "/key/:key_id", s: crate::group::get_user_group_key }
                          - get: { p: "/member/:last_fetched_time/:last_user_id", s: crate::group::get_group_member }
                          - post: { p: "/child", s: crate::group::create_child_group }
                          - post: { p: "/child/light", s: crate::group::create_child_group_light }
                          - post: { p: "/connected", s: crate::group::create_connected_group_from_group }
                          - post: { p: "/connected/light", s: crate::group::create_connected_group_from_group_light }
                          - delete: { p: "", s: crate::group::delete }
                          - delete: { p: "/leave", s: crate::group::leave_group }
                          - delete: { p: "/kick/:user_id", s: crate::group::kick_user_from_group }

                          - get: { p: "/children/:last_fetched_time/:last_id", s: crate::group::get_all_first_level_children }
                          # get all connected groups (where the group is member)
                          - get: { p: "/all/:last_fetched_time/:last_group_id", s: crate::group::get_all_groups_for_group }
                          # gets the invites for group as user
                          - get: { p: "/invite/:last_fetched_time/:last_group_id", s: crate::group::get_invite_req_for_group }
                          # get sent join req for group as user
                          - get: { p: "/joins/:last_fetched_time/:last_group_id", s: crate::group::get_sent_join_req_for_group }
                          - delete: { p: "/joins/:join_req_id", s: crate::group::delete_sent_join_req_for_group }
                          - delete: { p: "/invite/:group_id_to_reject", s: crate::group::reject_invite_group }
                          - patch: { p: "/invite/:group_id_to_join", s: crate::group::accept_invite_group }
                          # the normal invite to the actual group endpoints
                          - put: { p: "/invite/:invited_user", s: crate::group::invite_request }
                          - put: { p: "/invite/:invited_user/light", s: crate::group::invite_request_light }

                          - put: { p: "/invite_group/:invited_group", s: crate::group::invite_request_to_group }
                          - put: { p: "/invite_group/:invited_group/light", s: crate::group::invite_request_to_group_light }

                          - put: { p: "/invite_auto/:invited_user", s: crate::group::invite_auto }
                          - put: { p: "/invite_auto/:invited_user/light", s: crate::group::invite_auto_light }

                          - put: { p: "/invite_group_auto/:invited_group", s: crate::group::invite_auto_group }
                          - put: { p: "/invite_group_auto/:invited_group/light", s: crate::group::invite_auto_group_light }

                          - put: { p: "/invite_group_auto_force/:invited_group", s: crate::group::invite_auto_group_force }
                          - put: { p: "/invite_group_auto_force/:invited_group/light", s: crate::group::invite_auto_group_force_light }

                          - put: { p: "/re_invite/:invited_user", s: crate::group::re_invite_auto }
                          - put: { p: "/re_invite_group/:invited_group", s: crate::group::re_invite_auto_group }
                          - put: { p: "/re_invite_group_force/:invited_group", s: crate::group::re_invite_force }

                          - put: { p: "/invite/session/:key_session_id", s: crate::group::insert_user_keys_via_session_invite }

                          - put: { p: "/change_rank", s: crate::group::change_rank }
                          - patch: { p: "/change_invite", s: crate::group::stop_invite }
                          #_____________________________________________________________________________________________
                          # groups for join reqs
                          - group:
                              p: "/join_req"
                              gr:
                                - patch: { p: "/:group_id_to_join", s: crate::group::join_req_as_group }
                                - get: { p: "/:last_fetched_time/:last_user_id", s: crate::group::get_join_req }
                                - put: { p: "/:join_user", s: crate::group::accept_join_req }
                                - put: { p: "/:join_user/light", s: crate::group::accept_join_req_light }
                                - delete: { p: "/:join_user", s: crate::group::reject_join_req }
                                - put: { p: "/session/:key_session_id", s: crate::group::insert_user_keys_via_session_join_req }
                          #_____________________________________________________________________________________________
                          # groups for key rotation
                          - group:
                              p: "/key_rotation"
                              gr:
                                - post: { p: "", s: crate::group::start_key_rotation }
                                - get: { p: "", s: crate::group::get_keys_for_update }
                                - put: { p: "/:key_id", s: crate::group::done_key_rotation_for_user }